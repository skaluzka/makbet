Welcome to **makbet** project!

|

**makbet** stands for **mak**\ (efile) **b**\ (ased) **e**\ (xtraordinary)
**t**\ (ool).

Keep reading && have fun! :)

|

----

**Table of Contents**
---------------------

- | `Why?`_
- | `Features`_
- | `System requirements`_
- | `Installing`_
- | `Few words about backward compatibility`_
- | `DOT output`_
- | `PNG output`_
- | `CSV output`_
- | `Profiling`_
- | `References`_
- | `Contributing`_
- | `License`_
- | `Mission statement`_

|

Why?
----

This project has been created for several reasons...

Mainly to help:

- automating various complex scenarios,
- modeling, and prototyping complex real-life processes
  (e.g.: production/delivery chain) consisting of many tasks having many
  dependencies,
- reflecting, simulating and profiling complicated existing flows,
- visualizing dependencies in big projects (can help to find circular
  dependencies, or long execution paths),
- optimizing execution paths in existing systems.

But also to help:

- learning **GNU Make** utility,
- learning **DOT** language,
- learning **Bash** scripting.

|

And (the last but not least):

- **FOR FUN! :)**

|

Features
--------

**makbet's** key features are:

- based on **GNU Make** tool and its features,
- easy extensible,
- built-in support for parallelism,
- can be easy added/embedded into existing projects as 3rd party SW,
- pure console tool - no GUI required,
- good and fast integration with other console programs,
- unified naming scheme of all environment variables (every **makbet's**
  environment variable has ``MAKBET_`` prefix),
- unified syntax of all CLI options (every **makbet's** CLI option has
  ``MAKBET_`` prefix),
- saving tasks' details in **key=value** ``*.cfg`` files for further
  usage (e.g.: by shell scripts),
- saving tasks' details in ``*.csv`` files for further processing if needed
  (this feature can be enabled by ``MAKBET_CSV=1`` CLI option),
- profiling - measuring tasks duration (this feature can be enabled by
  ``MAKBET_PROF=1`` CLI option),
- generating **DOT** output showing relations between tasks (this feature can
  be enabled by ``MAKBET_DOT=1`` CLI option),
- it is pretty well documented,
- has a couple of quite nice examples, including small built-in tasks library
  (set of simple **Bash** scripts),
- minimal system requirements (see below).

|

System requirements
-------------------

Well... Nothing special here :)

The only system requirements are:

- GNU Linux OS
- GNU Make tool (version **3.82+**)
- Bash tool

All example scenarios have been successfully tested with **GNU Make 4.3** and
**Bash 5.0.16**.

|

Installing
----------

Installing **makbet** is quite easy.

- Download or clone the **makbet** project from GitHub.
- Export the ``MAKBET_PATH`` variable pointing to **makbet's** main directory
  (e.g.: ``export MAKBET_PATH=/home/user/makbet``).
- Change directory to main **makbet's** directory then run ``make`` command to
  see the help message.

And that's all.  You are now ready to write your own scenarios (or play with
built-in `examples <examples>`_).

|

Few words about backward compatibility
--------------------------------------

Please be aware that **makbet** is still in heavy development phase (no
major release has been published so far).

There are a couple of quite nice improvements already proposed for **makbet**,
see the details `here <https://github.com/skaluzka/makbet/issues>`_.  Therefore
there is no guarantee that backward compatibility will be kept all the time
(at least until the first major version will be released).

|

DOT output
----------

For every properly created scenario **makbet** is able to generate output
in **DOT** language (in form of so-called **digraph** - directed
graph - showing the flow direction between all tasks).  Such output can be
easily saved or redirected to file.  This can be achieved by passing
``MAKBET_DOT=1`` option to ``make`` execution command (by default
``MAKBET_DOT=0``) as in below example:

::

  [user@localhost 01.dummy]$ make makbet-clean && make all MAKBET_DOT=1

  2020-08-10 00:54:58.826 [INFO]: Task "@01-INIT" (TASK_ID: 1) started.


  2020-08-10 00:54:58.844 [INFO]: Task "@01-INIT" (TASK_ID: 1) terminated.


  2020-08-10 00:54:58.918 [INFO]: Task "task-A" (TASK_ID: 2) started.

  ...

  2020-08-10 00:55:09.030 [INFO]: Task "all" (TASK_ID: 13) started.


  2020-08-10 00:55:09.047 [INFO]: Task "all" (TASK_ID: 13) terminated.

  [user@localhost 01.dummy]$

Special **makbet's** target ``.show-merged-dot-results`` will display **DOT**
results which can be used for further processing:

::

  [user@localhost 01.dummy]$ make .show-merged-dot-results

  digraph {

  // This file has been generated by makbet heads/master-0-g0eba8f3
  // Generation date: Sun Aug 30 11:34:45 PM CEST 2020
  // Scenario file: /home/user/makbet/examples/01.dummy/Makefile

  // Graph title.
  labelloc="t";
  label="Scenario file: /home/user/makbet/examples/01.dummy/Makefile\n\n\n\n";

  // Node options.
  node [shape=box];


  "@01-INIT";

  "all" -> "task-F";

  "task-A" -> "@01-INIT";

  "task-B1" -> "task-A";

  "task-B2" -> "task-A";

  "task-B3" -> "task-A";

  "task-B4" -> "task-A";

  "task-B5" -> "task-A";

  "task-C" -> "task-B2";
  "task-C" -> "task-B3";

  "task-D" -> "task-C";

  "task-E" -> "task-B1";
  "task-E" -> "task-B4";
  "task-E" -> "task-B5";
  "task-E" -> "task-D";

  "task-F" -> "task-E";

  }


  // End of file

  [user@localhost 01.dummy]$

|

PNG output
----------

Below **PNG** picture has been rendered, by `edotor <https://edotor.net/>`_
online **DOT** editor, based on ``digraph`` code for
`01.dummy <examples/01.dummy/Makefile>`_ example (target ``all``).

.. image:: docs/examples/01.dummy/results.png
    :align: center

In general every **DOT** output, generated by **makbet**, can be saved in a file
and easily converted to other formats (like **PNG** or **PDF**) with the **dot**
tool or some other 3rd party utility.

Typical **DOT** -> **PNG** conversion is simple and straightforward:

::

  [user@host 01.dummy]$ dot -Tpng results.dot -o output.png

| For all **makbet's** examples the **DOT** files with their corresponding
  **PNG** images, can be found `here <docs/examples/>`__.

|

Two **DOT** online editors have been successfully tested with **makbet**:

- https://edotor.net/ (fully interactive!)
- http://webgraphviz.com/ (very simple, but works! :D)

|

CSV output
----------

For every properly created scenario **makbet** is able to generate valuable
**CSV** output.  Such output (similar as for **DOT** language above) can be
easily saved or redirected to file.  This can be achieved by passing
``MAKBET_CSV=1`` option to ``make`` execution command (by default
``MAKBET_CSV=0``) as in example below:

::

  [user@localhost 01.dummy]$ make makbet-clean && make all MAKBET_CSV=1

  2020-08-10 01:26:10.847 [INFO]: Task "@01-INIT" (TASK_ID: 1) started.


  2020-08-10 01:26:10.865 [INFO]: Task "@01-INIT" (TASK_ID: 1) terminated.


  2020-08-10 01:26:10.943 [INFO]: Task "task-A" (TASK_ID: 2) started.

  ...

  2020-08-10 01:26:21.358 [INFO]: Task "all" (TASK_ID: 13) started.


  2020-08-10 01:26:21.375 [INFO]: Task "all" (TASK_ID: 13) terminated.

  [user@localhost 01.dummy]$

Special **makbet's** target ``.show-merged-csv-events`` will display
**CSV** results which can be used for further processing:

::

  [user@localhost 01.dummy]$ echo ; make .show-merged-csv-events

  TASK_ID;TASK_NAME;TASK_DEPS;TASK_CMD;TASK_CMD_OPTS;TASK_EVENT_TYPE;TASK_DATE_TIME_[STARTED|TERMINATED];
  "1";"@01-INIT";"";"";"";"STARTED";"2020-08-31 23:56:00.649587995";
  "1";"@01-INIT";"";"";"";"TERMINATED";"2020-08-31 23:56:00.666786322";
  "10";"task-E";"task-B1 task-B4 task-B5 task-D";"/home/user/makbet/examples/01.dummy/tasks/generic-task.sh";"1";"STARTED";"2020-08-31 23:56:10.289023250";
  "10";"task-E";"task-B1 task-B4 task-B5 task-D";"/home/user/makbet/examples/01.dummy/tasks/generic-task.sh";"1";"TERMINATED";"2020-08-31 23:56:11.338833366";
  "11";"task-F";"task-E";"";"";"STARTED";"2020-08-31 23:56:11.482923596";
  "11";"task-F";"task-E";"";"";"TERMINATED";"2020-08-31 23:56:11.502223078";
  "13";"all";"task-F";"";"";"STARTED";"2020-08-31 23:56:11.602816027";
  "13";"all";"task-F";"";"";"TERMINATED";"2020-08-31 23:56:11.621920583";
  "2";"task-A";"@01-INIT";"/home/user/makbet/examples/01.dummy/tasks/generic-task.sh";"1";"STARTED";"2020-08-31 23:56:00.759734577";
  "2";"task-A";"@01-INIT";"/home/user/makbet/examples/01.dummy/tasks/generic-task.sh";"1";"TERMINATED";"2020-08-31 23:56:01.809743217";
  "3";"task-B1";"task-A";"/home/user/makbet/examples/01.dummy/tasks/generic-task.sh";"1";"STARTED";"2020-08-31 23:56:01.969186347";
  "3";"task-B1";"task-A";"/home/user/makbet/examples/01.dummy/tasks/generic-task.sh";"1";"TERMINATED";"2020-08-31 23:56:03.022288809";
  "4";"task-B2";"task-A";"/home/user/makbet/examples/01.dummy/tasks/generic-task.sh";"1";"STARTED";"2020-08-31 23:56:05.582568852";
  "4";"task-B2";"task-A";"/home/user/makbet/examples/01.dummy/tasks/generic-task.sh";"1";"TERMINATED";"2020-08-31 23:56:06.632680835";
  "5";"task-B3";"task-A";"/home/user/makbet/examples/01.dummy/tasks/generic-task.sh";"1";"STARTED";"2020-08-31 23:56:06.763160648";
  "5";"task-B3";"task-A";"/home/user/makbet/examples/01.dummy/tasks/generic-task.sh";"1";"TERMINATED";"2020-08-31 23:56:07.805955418";
  "6";"task-B4";"task-A";"/home/user/makbet/examples/01.dummy/tasks/generic-task.sh";"1";"STARTED";"2020-08-31 23:56:03.182027713";
  "6";"task-B4";"task-A";"/home/user/makbet/examples/01.dummy/tasks/generic-task.sh";"1";"TERMINATED";"2020-08-31 23:56:04.238375080";
  "7";"task-B5";"task-A";"/home/user/makbet/examples/01.dummy/tasks/generic-task.sh";"1";"STARTED";"2020-08-31 23:56:04.362296060";
  "7";"task-B5";"task-A";"/home/user/makbet/examples/01.dummy/tasks/generic-task.sh";"1";"TERMINATED";"2020-08-31 23:56:05.412659255";
  "8";"task-C";"task-B2 task-B3";"/home/user/makbet/examples/01.dummy/tasks/generic-task.sh";"1";"STARTED";"2020-08-31 23:56:07.924800941";
  "8";"task-C";"task-B2 task-B3";"/home/user/makbet/examples/01.dummy/tasks/generic-task.sh";"1";"TERMINATED";"2020-08-31 23:56:08.974943831";
  "9";"task-D";"task-C";"/home/user/makbet/examples/01.dummy/tasks/generic-task.sh";"1";"STARTED";"2020-08-31 23:56:09.103416326";
  "9";"task-D";"task-C";"/home/user/makbet/examples/01.dummy/tasks/generic-task.sh";"1";"TERMINATED";"2020-08-31 23:56:10.154993911";

  [user@localhost 01.dummy]$

| Above results (which are valid for **01.dummy** example) have been saved into
  this
  `results.csv <docs/examples/01.dummy/results.csv>`__ file.
| Results for other **makbet's** examples are available
  `here <docs/examples/>`__.

|

Profiling
---------

For every properly created scenario **makbet** is able to generate time
profiling results per each task (target) called during the runtime.  Such
results can be generated by passing ``MAKBET_PROF=1`` option to ``make``
execution command (by default ``MAKBET_PROF=0``) as in example below:

::

  [user@t460p 01.dummy]$ make makbet-clean && make all MAKBET_PROF=1

  2020-10-10 18:20:47.143 [INFO]: Task "@01-INIT" (TASK_ID: 1) started.


  2020-10-10 18:20:47.161 [INFO]: Task "@01-INIT" (TASK_ID: 1) terminated.

  Profiling results:
  T1 = 1602346847.143565328
  T2 = 1602346847.161162307
  T2 - T1 = 00h:00m:00s.017ms

  2020-10-10 18:20:47.244 [INFO]: Task "task-A" (TASK_ID: 2) started.

  ...

  2020-10-10 18:20:57.680 [INFO]: Task "all" (TASK_ID: 13) started.


  2020-10-10 18:20:57.698 [INFO]: Task "all" (TASK_ID: 13) terminated.

  Profiling results:
  T1 = 1602346857.680028075
  T2 = 1602346857.698575943
  T2 - T1 = 00h:00m:00s.018ms
  [user@t460p 01.dummy]$ 

**makbet** measures the duration of tasks with **milliseconds** accuracy.

When ``MAKBET_PROF=1`` is passed to the ``make`` command then **makbet** will
save some additional **cfg** files during the runtime.  All these files will be
saved in ``.cache/prof/cfg/`` directory and can be seen by invoking one of
**makbet's** special targets: ``.show-prof-dir`` or ``.show-prof-cfg-dir``.
For example:

::

  [user@t460p 01.dummy]$ make .show-prof-dir
  /home/user/makbet/.cache/prof/cfg
  ├── [-rw-r--r-- user user         220]  /home/user/makbet/.cache/prof/cfg/@01-INIT.cfg
  ├── [-rw-r--r-- user user         222]  /home/user/makbet/.cache/prof/cfg/all.cfg
  ├── [-rw-r--r-- user user         304]  /home/user/makbet/.cache/prof/cfg/task-A.cfg
  ├── [-rw-r--r-- user user         303]  /home/user/makbet/.cache/prof/cfg/task-B1.cfg
  ├── [-rw-r--r-- user user         303]  /home/user/makbet/.cache/prof/cfg/task-B2.cfg
  ├── [-rw-r--r-- user user         303]  /home/user/makbet/.cache/prof/cfg/task-B3.cfg
  ├── [-rw-r--r-- user user         303]  /home/user/makbet/.cache/prof/cfg/task-B4.cfg
  ├── [-rw-r--r-- user user         303]  /home/user/makbet/.cache/prof/cfg/task-B5.cfg
  ├── [-rw-r--r-- user user         311]  /home/user/makbet/.cache/prof/cfg/task-C.cfg
  ├── [-rw-r--r-- user user         302]  /home/user/makbet/.cache/prof/cfg/task-D.cfg
  ├── [-rw-r--r-- user user         327]  /home/user/makbet/.cache/prof/cfg/task-E.cfg
  └── [-rw-r--r-- user user         225]  /home/user/makbet/.cache/prof/cfg/task-F.cfg

  0 directories, 12 files
  /home/user/makbet/.cache/prof/csv

  0 directories, 0 files
  [user@t460p 01.dummy]$ 

An example content of profiling file (for **all** target):

::

  [user@t460p 01.dummy]$ cat /home/user/makbet/.cache/prof/cfg/all.cfg
  TASK_ID="13"
  TASK_NAME="all"
  TASK_DEPS="task-F"
  TASK_CMD=""
  TASK_CMD_OPTS=""
  TASK_DATE_TIME_STARTED="2020-10-10 18:20:57.680028075"
  TASK_DATE_TIME_TERMINATED="2020-10-10 18:20:57.698575943"
  TASK_DURATION=00h:00m:00s.018ms
  [user@t460p 01.dummy]$ 

Every profiling **cfg** file has so-called **key=value** format and can be
easily used for further preprocessing if needed.

|

References
----------

Useful **GNU Make** links:

- https://www.gnu.org/software/make/manual/
- http://www.conifersystems.com/whitepapers/gnu-make/

Useful **DOT** language links:

- https://graphviz.gitlab.io/documentation/
- https://en.wikipedia.org/wiki/DOT_%28graph_description_language%29

Useful **CSV** links:

- https://tools.ietf.org/html/rfc4180
- https://en.wikipedia.org/wiki/Comma-separated_values
- https://www.convertcsv.com/csv-viewer-editor.htm

All **Bash** scripts have been checked with ``schellcheck`` utility:

- https://www.shellcheck.net/
- https://github.com/koalaman/shellcheck

|

Contributing
------------

Pull requests are welcome! :)

For more details about contributing rules please check
`CONTRIBUTING.rst <CONTRIBUTING.rst>`_
file.

|

License
-------

**makbet** is licensed under the
`MIT <LICENSE>`_
license.

|

Mission statement
-----------------

*"What's done, is done."* - William Shakespeare, **Macbeth**.


.. End of file
